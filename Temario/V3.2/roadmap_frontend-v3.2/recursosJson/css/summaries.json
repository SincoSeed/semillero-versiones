[
    {
        "name": "Introducción a CSS",
        "father": "",
        "principal": [
            "Las hojas de estilo en cascada son el componente del diseño que se encarga de poner estilo en un sitio web,  dando entrada a muchas tecnologias nuevas que en conjunto dan entrada a un solo objetivo principal DISEÑAR LA VISTA DE UNA PÁGINA WEB.",
            "El css se divide en dos grandes ramas que en conjunto dan origen a las famosas reglas de CSS, estas son :",
            "SELECTORES y PROPIEDADES",
            "Donde los selectores son la forma de buscar en el documento el elemento al cual le vamos a aplicar una regla de CSS y las propiedades van a ser los diseños de estilo que se aplican dentro de una regla.",
            "Aunque los selectores se clasifican en unos grupos selectos, las propiedades son todo lo contrario."
        ],
        "examples": "",
        "conclusions": [
            {
                "conclusionsT": [
                    "El mundo de CSS es enorme  y requiere una curva de aprendizaje un poco especial ,ya que, si bien es cierto que se pueden realizar buenos diseños usando un desempeño básico y estandarizado, tembién es cierto que evolucionar esta tecnología a un nivel más profecinalizado, requiere de mucho estudio y de muchas horas de práctica para hacer obras de arte jugando con los diseños de una página web.",
                    "También quiero añadir que con Css nativo sin usar algún tipo de framework, se pueden crear diseños increibles y hacer todo lo que la imaginación te ordene, siempre y cuando conozcas el potencial que te ofrece un lenguaje de diseño tan grande como lo es CSS."
                ],
                "Links": ""
            }
        ],
        "list": [
            {
                "title": "Selectores",
                "items": [
                    "Selectores básicos",
                    "Selectores hacia Pseudo-elementos",
                    "Selectores con pseudo clases",
                    "Selectores dentro de reglas"
                ]
            },
            {
                "title": "Propiedades pricipales",
                "items": [
                    "background",
                    "with",
                    "height",
                    "font-family",
                    "font-size",
                    "diplay",
                    "color",
                    "margin",
                    "padding",
                    "border",
                    "ETC"
                ]
            }
        ]
    },
    {
        "name": "Selectores básicos",
        "father": "",
        "principal": [
            "Los selectores de css, son los encargados de especificar propiedades, a uno o varios elementos de un HTML, sin embargo estos se dividen en , selectores básicos, Pseudo Selectores, y Selectores anidados.",
            "Selectores básicos son todos aquellos, que se entienden de una manera sencilla ya que estos suelen ser, el nombre de una etiqueta de HTML, o también pueden ser, una Clase o Id de un elemento de HTML utilizando la siguiente estructura para su uso."
        ],
        "examples": [
            {
                "title": "Demostración Selectores CSS",
                "iframes": "https://codepen.io/SincoSemillero/pen/GRJOZxr",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "En conclusión, los selectores básicos, son herramientas útiles, para empezar a aplicar estilos y diseños de manera rápida, a elementos de un HTML.",
                    "Para más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links Apoyo",
                "Links": [
                    "https://uniwebsidad.com/libros/css/capitulo-2/selectores-basicos",
                    "https://uniwebsidad.com/libros/css-avanzado/capitulo-3"
                ]
            }
        ],
        "list": [
            {
                "title": "Selectores más conocidos",
                "items": [
                    "Selector por etiqueta = nombre_etiqueta{Propiedad:valor;}",
                    "Selector por clase = .clase_del_elemento{Propiedad:valor;}",
                    "Selector por ID =   #ID_del_eñemento{Propiedad:valor;}"
                ]
            },
            {
                "title": "Tipos de selectores",
                "items": [
                    "Selector de hijos",
                    "Selector adyacente",
                    "Selector de atributos"
                ]
            }
        ]
    },
    {
        "name": "Pseudo Selectores",
        "father": "",
        "principal": [
            "Una pseudoclase CSS es una palabra clave que se añade a los selectores y que específica un estado especial del elemento seleccionado Por ejemplo,  :hover aplicará un estilo cuando el usuario haga hover sobre el elemento especificado por el selector.",
            "Las pseudoclase, junto con los pseudoelementos, permiten aplicar un estilo a un elemento no solo en relación con el contenido del árbol de documento, sino también en relación a factores externos como el historial del navegador (:visited, por ejemplo), el estado de su contenido (como :checked en algunos elementos de formulario), o la posición del ratón (como :hover que permite saber si el ratón está encima de un elemento o no)."
        ],
        "examples": [
            {
                "title": "Usando Pseudo Selector :Hover",
                "iframes": "https://codepen.io/SincoSemillero/pen/ExjbKLz",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "En conclusión los Pseudo selectores y Pseudo clases son elementos, o eventos que podemos usar en css, para cambiar la apariencia de un elemento en un caso o evento específico.",
                    "Para más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links Apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes",
                    "https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos"
                ]
            }
        ],
        "list": [
            {
                "title": "Pseudo-Clases",
                "items": [
                    ":active",
                    ":cheked",
                    ":default",
                    ":first",
                    ":first-child",
                    ":focus",
                    ":hover",
                    ":target",
                    ":visited",
                    ":not()",
                    ":nth-child()",
                    ":only-of-type",
                    ":root"
                ]
            },
            {
                "title": "Pseudo-Elementos",
                "items": [
                    "::after",
                    "::before",
                    "::first-letter",
                    "::first-line",
                    "::selection",
                    "::backdrop",
                    "::placeholder",
                    "::marker",
                    "::spelling-error",
                    "::grammar-error"
                ]
            }
        ]
    },
    {
        "name": "Background",
        "father": "",
        "principal": [
            "Iniciando con lo principal de una regla de estilos CSS básica, vamos a hablar de la propiedad “Background”, la cual cuando uno inicia lo primero que realiza es cambiar el fondo usando esta propiedad y empezar a jugar con eso, con el fondo de un documento HTML.",
            "Pero al ser una propiedad tan aparentemente fácil, trae consigo muchas cosas que se desconocen como por ejemplo un fondo en degrade, o un mosaico, o cosas así por el estilo, como poner una foto de fondo, y que ésta no se repita y cubra la totalidad de la pantalla y demás.",
            "Los fondos son de las herramientas más básicas y principales, pero también una de las que posee más propiedades con las que podemos jugar."
        ],
        "examples": [
            {
                "title": "Cambiando color background-usando hover",
                "iframes": "https://codepen.io/SincoSemillero/pen/rNVYeqb",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "El background nos ayuda a realizar diseños únicos, además de darnos la posibilidad de poder manipular cada elemento de un documento HTML en cuanto al fondo del elemento .",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/background",
                    "https://aprende-web.net/css/css5_3.php"
                ]
            }
        ],
        "list": [
            {
                "title": "Sub-propiedades Background",
                "items": [
                    "background-attachment",
                    "background-color",
                    "background-image",
                    "background-position",
                    "background-repeat",
                    "background-size",
                    "background-clip",
                    "background-origin",
                    "background-position-x",
                    "background-position-y",
                    "background-blend-mode"
                ]
            }
        ]
    },
    {
        "name": "Width  y Height",
        "father": "",
        "principal": [
            "Una de las herramientas básicas que se usa también bastante son las de dimensionamiento de elementos, para esto utilizamos 2 propiedades enfocadas a ello y unas unidades de medida.",
            "Las propiedades son Width y Height que nos representan ancho y alto de un elemento en la parte visual del mismo, y podremos jugar con sus sub propiedades combinándolas con otras propiedades que veremos un poco más adelante.",
            "Para hacer uso de estas propiedades debemos tener en cuenta que tenemos las siguientes sub-propiedades y unidades de medida."
        ],
        "examples": [
            {
                "title": "Dimencionamiento de elementos con widht y height",
                "iframes": "",
                "images": "../images/css/medidascss.svg"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando hablamos de dar dimensiones a un elemento, podemos hacerlo de muchas formas dependiendo de la situación, usando las propiedades widht y height y haciendo variaciones entre las unidades de medida disponibles que nos ofrece CSS.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://platzi.com/blog/unidades-de-medida-en-css/",
                    "https://www.w3schools.com/css/css_dimension.asp"
                ]
            }
        ],
        "list": [
            {
                "title": "Sub-prorpiedades de widht y height",
                "items": [
                    "max-width: declara el ancho maximo que tendra un elemento",
                    "min-width: declara el ancho minimo que tendra un elemento",
                    "max-height: declara el alto maximo de un elemento",
                    "min-height: declara el alto minimo de un elemento"
                ]
            },
            {
                "title": "Únidades de medida - absolutas",
                "items": [
                    "cm: centímetros",
                    "mm: milímetros",
                    "in: pulgadas (1in = 96px-2.54cm)",
                    "px: pixeles",
                    "pt: puntos (1pt = 1/72 de 1 in)",
                    "pc: picas (1pc = 12pt aproximadamente)"
                ]
            },
            {
                "title": "Únidades de medida-relativas",
                "items": [
                    "em: relativo al tamaño de la fuente de un elemento",
                    "ex: aumente con relación a la altura de la letra",
                    "Rem: aumenta sobre el tamo de fuente raíz",
                    "vw: porcentaje relativo al ancho de viewport",
                    "vh: porcentaje relativo a la altura de viewport",
                    "vmin: toma el menor valor entre vw y vh",
                    "vmax: toma el mayor valor entre vw y vh",
                    "%: base principal de unidades relativas",
                    "fr: únidad relativa a fracciones de pantalla más usada en Layouts"
                ]
            }
        ]
    },
    {
        "name": "Propiedades Font- y Color",
        "father": "",
        "principal": [
            "Continuando con las propiedades básicas de CSS, le corresponde el turno a las propiedades de fuente y a la propiedad de color de fuente.",
            "Empezando por las propiedades de fuente, estas son reconocidas por contener en su nombre el prefijo  Font- lo que nos facilita un poco más saber que parte de la fuente vamos a modificar exactamente.",
            "Por otra parte, está la propiedad Color, que es la que se encarga de dar el color de la fuente en una regla de CSS."
        ],
        "examples": [
            {
                "title": "Cambiando estilo y tamaño de fuente",
                "iframes": "https://codepen.io/SincoSemillero/pen/ExjbKOq",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Como nos pudimos dar cuenta en las imágenes anteriores, las propiedades de Font pueden significar un gran cambio en el diseño de una página o una vista, haciéndola lucir de una manera completamente diferente solamente con cambiar la fuente aplicada.",
                    "Además de la propiedad Font el color también puede ser un cambio significativo en un diseño, ya que la misma nos da tener un diseño bien organizado dentro de una página web si el color de la letra se confunde con el fondo y no es legible.",
                    "Entonces jugar no solo con el diseño de la fuente, sino también jugar con el color de la letra y el contraste con el fondo son las bases principales para lograr un contenido claro y legible.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/font",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
                ]
            }
        ],
        "list": [
            {
                "title": "Propiedades  Font- de valor individual",
                "items": [
                    "font-style",
                    "font-variant",
                    "font-weight",
                    "font-size",
                    "font-family"
                ]
            }
        ]
    },
    {
        "name": "Propiedades de display",
        "father": "",
        "principal": [
            "La propiedad display es la encargada de mostrar  los elementos, ya que dependiendo del valor aplicado a un elemento, este puede cambiar o no su comportamiento y su forma de verse en la pantalla.",
            "Los valores de la propiedad display se dividen según su comportamiento, éstas pueden ser: Outside - Inside - Listitem - Internal - box - legacy  y globales.",
            "A continuación podemos ver los valores de display según su categoría:"
        ],
        "examples": [
            {
                "title": "Jugando con algunos valores de display",
                "iframes": "https://codepen.io/SincoSemillero/pen/ZEGaWVw",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Como pudimos darnos cuenta en el ejemplo anterior, la propiedad display nos ayuda a acomodar  los elementos en la pantalla de diferentes maneras.",
                    "Hay que tener en cuenta que hay elementos a los cuales les cambia su estilo de diseño por defecto, como lo es el caso de las listas, sin embargo eso no es impedimento para jugar un poco con la propiedad display.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/display",
                    "https://www.lawebera.es/xhtml-css/css-avanzado-propiedad-display.php"
                ]
            }
        ],
        "list": [
            {
                "title": "Display-outside",
                "items": [
                    "block",
                    "inline",
                    "run-in"
                ]
            },
            {
                "title": "display-inside",
                "items": [
                    "flow",
                    "flow-root",
                    "table",
                    "flex",
                    "grid",
                    "ruby",
                    "subgrid"
                ]
            },
            {
                "title": "display-outside + display-inside",
                "items": [
                    "block flow",
                    "inline table",
                    "flex run-in"
                ]
            },
            {
                "title": "display-listitem",
                "items": [
                    "list-item",
                    "list-item block",
                    "list-item inline",
                    "list-item flow",
                    "list-item flow-root",
                    "list-item block flow",
                    "list-item block flow-root",
                    "flow list-item block"
                ]
            },
            {
                "title": "display-internal",
                "items": [
                    "table-row-group",
                    "table-header-group",
                    "table-footer-group",
                    "table-row",
                    "table-cell",
                    "table-column-group",
                    "table-column",
                    "table-caption",
                    "ruby-base",
                    "ruby-text",
                    "ruby-base-container",
                    "ruby-text-container"
                ]
            },
            {
                "title": "display-box",
                "items": [
                    "contents",
                    "none"
                ]
            },
            {
                "title": "display-legacy",
                "items": [
                    "inline-block",
                    "inline-table",
                    "inline-flex",
                    "inline-grid"
                ]
            },
            {
                "title": "Valores globales",
                "items": [
                    "heredar",
                    "initial",
                    "unset"
                ]
            }
        ]
    },
    {
        "name": "Margin, Padding y Border",
        "father": "",
        "principal": [
            "Siguiendo con las propiedades básicas, esta vez nos adentramos un poco en la base para los modelos de cajas,  y espaciado de elementos.",
            "Empecemos con la propiedad border, ya que esta es la que nos va a delimitar un elemento, para poder hacer visual el tamaño del elemento y sus límites de contenido, además de ayudarnos a comprender las dos siguientes propiedades.",
            "Continuamos con la propiedad margin, esta nos ayuda a dar un espaciado entre los elementos, pero aplicado del borde del elemento hacia su exterior, es decir, la propiedad margin separa a los elementos desde su borde hacia afuera, una distancia que nosotros predefinamos.",
            "Seguimos con el padding, esta propiedad realiza una acción similar al margin, con la diferencia de que este espaciado lo va a hacer entre el elemento principal y sus elementos internos, es decir, desde el borde hacia la parte interna del elemento.",
            "Normalmente cuando inspeccionamos un documento HTML desde el navegador y seleccionamos un elemento nos saldrán estas propiedades en señaladas en colores, dependiendo el elemento estas propiedades van a cambiar.",
            "Las formas de definir los tamaños de estas propiedades es de la siguiente manera:",
            "Estas propiedades reciben 4 valores que corresponde a top-right-bottom-left en ese orden, aunque si queremos algo más práctico, podemos definir solo 2 valores que haran referencia a top-bottom//left-right  en ese orden, o también se puede definir un solo valor, que se aplicará de manera global, pero también hay sub-propiedades que podremos aplicar a un solo lado o en caso de el borde, un estilo específico también, de manera específica estas sub-propiedades son:"
        ],
        "examples": [
            {
                "title": "Propiedades Margin-Border-Padding visualmente",
                "iframes": "",
                "images": "../images/css/xaml-layout-margins-padding.svg"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "En la imagen anterior se nota un poco más claro los espacios que ocuparía un elemento dependiendo de sus propiedades, además de mostrar un mapeo más claro de que es lo que estamos manipulando al modificar las propiedades margin, border y padding.",
                    "Además de hacer un pequeño repaso de estas propiedades,  y dar un pequeño vistazo de todo lo que se puede hacer únicamente usando box-model para posicionar mejor nuestros elementos.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://docs.microsoft.com/es-es/windows/uwp/design/layout/alignment-margin-padding",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/margin",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/padding",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/border"
                ]
            }
        ],
        "list": [
            {
                "title": "Propiedades Margin- ,padding-",
                "items": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ]
            },
            {
                "title": "Propiedades border-",
                "items": [
                    "bottom",
                    "top",
                    "right",
                    "left",
                    "color",
                    "image",
                    "radius",
                    "style",
                    "width"
                ]
            }
        ]
    },
    {
        "name": "Propiedades float y clear",
        "father": "",
        "principal": [
            "Float es una propiedad que sirve para alinear elementos en la pantalla, usando como referencia el eje x de la pantalla, para posicionarse bien sea todo a la derecha o la izquierda.",
            "En conjunto con float se encuentra la propiedad clear, que se usa cuando queremos que un elemento que tenga un flotante cerca, deje de posicionarse junto a el.",
            "Usando estas 2 propiedades podemos posicionar de una manera más limpia los elementos de un documento HTML, sin embargo, hay que tener en cuenta que float y clear cuentan con una restricción que los limita a usar únicamente, el espacio más pegado a la derecha o a la izquierda usando left y right."
        ],
        "examples": [
            {
                "title": "Posicionamiento con float",
                "iframes": "",
                "images": "../images/css/float.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando usamos float podríamos causar un conflicto de estilo, así que no es tan eficiente usarlo, ya que existen opciones mejores, sin embargo si logras dominarlo podría ser una gran herramienta  para posicionar imágenes dentro de un párrafo, o dejar un botón fijo en algún lado de la pantalla",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://www.hazunaweb.com/curso-de-css/float-y-clear/",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/float"
                ]
            }
        ]
    },
    {
        "name": "Propiedad Position",
        "father": "",
        "principal": [
            "La propiedad position es la encargada de alinear y ubicar los elementos en la pantalla cuando es requerido, hay 5 clases de position y además, trae consigo 5 propiedades que lo complementan.",
            "A partir de usar la propiedad position ya podremos usar las propiedades de coordenada, que dependiendo del valor de position que estemos usando tendrán un comportamiento u otro.",
            "Tanto como los valores de position, como las propiedades de coordenadas, las podremos ver a continuación:"
        ],
        "examples": [
            {
                "title": "Jugando con propiedades de position",
                "iframes": "https://codepen.io/SincoSemillero/pen/QWbONYx",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando un objeto tiene posición relativa, este se mantiene en el flujo normal del documento, se posiciona en una ubicación por defecto, y tomando ese punto de partida como referencia, se desplaza hacia las coordenadas que le definamos las propiedades designadas para ello.",
                    "Cuando un elemento tiene posición absoluta, este sale del flujo normal del documento, y no se crea un espacio para él, en su lugar, éste toma como referencia para ubicarse por coordenadas, los bordes del elemento que lo contengan, es decir, usará los bordes de su elemento padre, para ubicarse a partir de ahí.",
                    "Cuando un elemento tienen posición fixed, este es sacado del flujo normal del documento, y en su lugar es ubicado en una ubicación fija dada por coordenadas pero a diferencia de la posicion absoluta, fixed toma como referencia los bordes del ViewPort o la ventana que lo contenga, además cuando un elemento es fixed, este no se verá afectado por el scroll, manteniéndose siempre en una misma posición.",
                    "Cuando un elemento tiene posición sticky, este se mantiene en el flujo normal del documento y es ubicado por el mismo, sin embargo, las coordenadas, sirven para indicar un tope, del cual el objeto no se moverá más, es decir, si el elemento se ve afectado por scroll, este se moverá hasta llegar a ese tope dado por coordenadas, y se quedará fijo hasta que vuelva a su posición normal,  nuevamente ubicado en el lugar donde arrancó por defecto junto a los elemento que se encontraba antes de ser afectado por el scroll.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/position"
                ]
            }
        ],
        "list": [
            {
                "title": "Tipos de posiciones de la propiedad position",
                "items": [
                    "relative ",
                    "absolute ",
                    "fixed",
                    "sticky",
                    "static"
                ]
            },
            {
                "title": "Propiedades de coordenada",
                "items": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "z-index"
                ]
            }
        ]
    },
    {
        "name": "Uso de coordenadas",
        "father": "",
        "principal": [
            "Las coordenadas son utilizadas en conjunto con la propiedad de position, que es la que en teoría habilita las 4 propiedades que permiten ubicar los elementos dentro de un documento.",
            "Las 4 propiedades son los puntos de referencia que usaran los elementos para ubicarse, teniendo en cuenta su punto de partida, que se toma a partir de display que se halla puesto."
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Las propiedades top y Bottom, toma como referencia el borde superior del contenedor, y a partir de allí posicionarse, entre mayor sea el valor de top, más alejado del borde superior se verá el elemento.",
                    "Para las propiedades left y right los elementos tomaran de referencia los bordes derecho o izquierdo según corresponda y aplican exactamente las mismas condiciones de las otras dos cuanto mayor sea el valor que posea esta propiedad, más alejado se verá del borde de origen de la propiedad.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/top",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/right",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/bottom",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/left"
                ]
            }
        ],
        "list": [
            {
                "title": "Propiedades de coordenada",
                "items": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "z-index"
                ]
            }
        ]
    },
    {
        "name": "Css Grid Layout",
        "father": "",
        "principal": [
            "Css es un sistema  para realizar layouts, bidimensional, basado en grillas o cuadriculas, donde podemos predefinir, cuantas filas y cuantas columnas vamos a tener,  o también podremos dejaras automáticas, aunque para ser sincero al ser un sistema basado en grillas bidireccionales, vale más la pena definir la cantidad de filas o columnas que vamos a usar.",
            "Dentro de este resumen de Css Grid vamos a ver los siguientes puntos:"
        ],
        "list": [
            {
                "title": "",
                "items": [
                    "Creación de un contenedor grid, y sus templates.",
                    "Funciones de creación en los templates.",
                    "Propiedades de asignación, líneas y celdas."
                ]
            }
        ]
    },
    {
        "name": "Creación de un contenedor grid",
        "father": "",
        "principal": [
            "Un grid es una cuadricula bidimensional definida por filas y columnas a las cuales se le denominan templates, pero antes de hablar de los templates primero debemos establecer un contenedor para almacenar esta cuadricula.",
            "Para definir una cuadricula usamos la propiedad de display GRID en el elemento que escojamos como contenedor, y a partir de aquí ya podemos empezar a establecer los templates de sus filas-columnas  y áreas de contenido.",
            "Para definir los templates, hay 4 propiedades que posemos utilizar, solo hay que tener cuidado de que al definir, siempre usar la propiedad que tenga “template” en su nombre."
        ],
        "examples": [
            {
                "title": "Como se veria un grid, al inspeccionar un elemento",
                "iframes": "",
                "images": "../images/css/CssGrid-1.png"
            },
            {
                "title": "Como se veria un grid en código css",
                "iframes": "",
                "images": "../images/css/CssGrid-2.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Como podemos observar en la imagen 1 podemos notar que el div calculadora esta cuadriculado en 6 filas y 4 columnas, esto es posible gracias a lo que se ve en la imagen 2 que ya entraremos a explicar.",
                    "Como se ve en la imagen 2 estamos definiendo un grid de 6x4 con la propiedad grid-templates, esta propiedad es la abreviación de grid-columns y grid-rows en una sola, donde su primer valor, será las filas, y el segundo valor serán las columnas de  nuestra cuadricula.",
                    "En la parte de grid-template-areas, podemos hacer como un mapa de lo que va a ser nuestro layout donde cada palabra hace referencia una celda de la cuadricula, las columnas irán separadas por espacio, y cada fila irá entre “ “ y entre fila y fila puede ir o espacio, o una salto de línea, lo importante es no poner comas entre fila y fila, haciendo así un mapa del contenido que tendremos en nuestro sitio o cuadricula.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout/Conceptos_B%C3%A1sicos_del_Posicionamiento_con_Rejillas"
                ]
            }
        ],
        "list": [
            {
                "title": "Las propiedades para definir templates son:",
                "items": [
                    "Grid-template",
                    "Grid-template-colums",
                    "Grid-template-rows",
                    "Grid-template-areas"
                ]
            }
        ]
    },
    {
        "name": "Funciones de creación en los templates",
        "father": "",
        "principal": [
            "Las funciones de creación son 2 herramientas de las cuales una  nos ayuda a hacer filas y columnas de una manera más rápida únicamente cuando vamos a crear filas o columnas exactamente iguales, y la otra nos ayuda a establecer un tamaño mínimo y máximo, para hacer un poco más dinámico al momento de crear cuadriculas implícitas de grid."
        ],
        "examples": [
            {
                "title": "Repeat()",
                "iframes": "",
                "images": "../images/css/CssGrid-3.png"
            },
            {
                "title": "Minmax()",
                "iframes": "",
                "images": "../images/css/CssGrid-4.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Repeat es una función de creación que se enfoca en crear filas/columnas según lo que le llegue por parámetro, donde  el valor que está antes de la coma, es la cantidad de filas/columnas va a crear, y el otro valor es el tamaño que tendrán esas filas/columnas, que en la imagen se ver como 1fr (una fracción del contenido), y así aseguramos, que si hay 6 ítems, todos serán del mismo tamaño.",
                    "Minmax es una función de dinamismo, que recibe por parámetro 2 valores, el primero es el valor mínimo de la cuadricula, y el segundo es el valor máximo que esa cuadricula puede ocupar, se usa únicamente, cuando vamos a crear cuadriculas una a una, ya que con repeat todas tendrían el mismo tamaño, con esta se le podrían aplicar valores variables ente el min y el Max.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout/Conceptos_B%C3%A1sicos_del_Posicionamiento_con_Rejillas"
                ]
            }
        ],
        "list": [
            {
                "title": "Las funciones de creación son 2",
                "items": [
                    "Repeat(cantidad/tamaño)",
                    "Minmax(Tminimo/Tmaximo)"
                ]
            }
        ]
    },
    {
        "name": "Propiedades de asignación, líneas y celdas",
        "father": "",
        "principal": [
            "Cuando hablamos de asignar espacios a un elemento hay 2 formas de hacerlo manualmente, o simplemente dejando que los elemento se posicionen en un espacio por defecto, pero como la idea de un layout, es diseñarlo a nuestra manera, hay 3 formas de posicionar un elemento, pero para esto debemos tener en cuenta 2 cosas, las líneas, y las celdas.",
            "Las líneas son tomadas desde el borde de la cuadricula, por lo que si tenemos un grid de 3x2 esta cuadricula tendrá un total de 4 líneas x 3 líneas, como se ve en la imagen de los ejemplos, pero a diferencia de las celdas, esta cuadricula solo tendrá 6 celdas, esto es importante, porque si queremos posicionar un elemento en una celda específica, o en un conjunto de celdas, debemos tener en cuenta el número de la línea donde éste iniciará, y hasta que línea irá ese contenido.",
            "Las líneas se numeran de izquierda a derecha para las columnas, y de arriba abajo para las filas, hay que tener muy presente esto.",
            "Ahora hay otra forma de ubicar elementos usando las líneas de referencia, o podemos usar el mapeo de “grid-template-areas” para ubicar elementos en la posición exacta, que se mapeo."
        ],
        "examples": [
            {
                "title": "Distribución por líneas",
                "iframes": "",
                "images": "../images/css/cssGrid-5.png"
            },
            {
                "title": "Asignación por líneas",
                "iframes": "",
                "images": "../images/css/cssGrid-6.png"
            },
            {
                "title": "Asignación por areas",
                "iframes": "",
                "images": "../images/css/cssGrid-7.png"
            },
            {
                "title": "Así se ve un grid asignado",
                "iframes": "",
                "images": "../images/css/cssGrid-1.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando se hace una asignación de espacio basándose en el mapeo hecho con grid-template-area, lo único que haremos es ir a la regla de css del elemento que queremos y usamos la propiedad grid-area, y en su valor vamos a colocar la mima palabra que usamos en el mapeo del grid-template-areas, y automáticamente, el elemento se situará en ese mismo lugar que esté en el mapeo.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout/Conceptos_B%C3%A1sicos_del_Posicionamiento_con_Rejillas"
                ]
            }
        ],
        "list": [
            {
                "title": "Propiedades asignación",
                "items": [
                    "Grid-column/row-start: indica la línea de inicio del área de fila o columna según se escoja.",
                    "Grid-column/row-end: indica la línea de fin del área de fila o columna según se escoja.",
                    "Grid-colum/row: simplificación que  recibe (línea inicio / línea fin)",
                    "Grid-area: asigna un área del mapeo grid-template-areas."
                ]
            }
        ]
    },
    {
        "name": "Alineación justificación y distribución del espacio entre ítems",
        "father": "",
        "principal": [
            "Después de haber manipulado los ítems solo nos falta saber cómo acomodarlos mediante las propiedades aling-items y justify-content que son las propiedades que se van a encargar de posicionar nuestro contenido de una forma más organizada, en cuanto a espacios se refiere.",
            "Hay que tener en cuenta que la propiedad aling-items alineara los elementos basándose en el eje cruzado, mientras que justify-content alineará los elementos usando el eje principal."
        ],
        "examples": [
            {
                "title": "Visualización valores Aling-items",
                "iframes": "",
                "images": "../images/css/align5.png"
            },
            {
                "title": "Visualización valores Justify-content",
                "iframes": "",
                "images": "../images/css/justify.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "El valor strech que pueden tomar estas dos propiedades es básicamente, el valor por defecto de la alineación que tienen los elementos por lo que al usarla no se vería cambio alguno.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Flexible_Box_Layout/Conceptos_Basicos_de_Flexbox"
                ]
            }
        ],
        "list": [
            {
                "title": "Posibles Valores de Aling-Items",
                "items": [
                    "Strech",
                    "Flex-start",
                    "Flex-end",
                    "center"
                ]
            },
            {
                "title": "Posibles valores de Justify-content",
                "items": [
                    "stretch",
                    "flex-start",
                    "flex-end",
                    "center",
                    "space-arround",
                    "space-between"
                ]
            }
        ]
    },
    {
        "name": "Ejes-contenedor-líneas",
        "father": "",
        "principal": [
            "Para iniciar a usar Flexbox, primero debemos establecer el contenedor estático que va a contener dentro de sí va a contener más elementos que por herencia de su contenedor padre, se convertirán en elementos flexibles, este contenedor se inicializa usando la propiedad de display: Flex.",
            "A partir de aquí, todos los elementos subyacentes, como el mismo contenedor, pueden hacer uso de las demás propiedades de flexbox.",
            "Ahora hablando de los ejes flexbox cuenta con 2 ejes (principal/cruzado), estos son aplicados en el elemento contenedor, donde se setea un eje principal (filas / columnas) y dependiendo de cuál eje sea el escogido principal, el otro queda por defecto como el eje cruzado, si no se establece un eje, el eje por defecto de flexbox es filas o Rows."
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Para concluir con las líneas limites, éstas hacen referencia a los bordes de un elemento contenedor de elementos flexibles, y teniendo en cuenta estos límites vamos a poder mejorar el diseño de caja flexible un poco más a nuestro gusto.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Flexible_Box_Layout/Conceptos_Basicos_de_Flexbox"
                ]
            }
        ]
    },
    {
        "name": "Propiedades Aplicadas a los ítems",
        "principal": [
            "Luego de tener un contenedor, un eje principal, saber si los elemento van a saltar de línea o no, llega la hora de empezar a manipular las propiedades de un elemento flexible como lo son: su ancho base, su proporción de aumento y su proporción de reducción, todo esto para darle un toque de diseño más profesional a un layout hecho con flexbox.",
            "Las propiedades con las que podemos modificar estas propiedades, se le deben aplicar a los elementos que queremos que cambien mediante medidas flexibles."
        ],
        "examples": [
            {
                "title": "Propiedades aplicadas a los ítems",
                "iframes": "https://codepen.io/SincoSemillero/pen/gOpeYJa",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "La propiedad flex-basis es la medida base que tendrá un elemento con base al espacio que dejará disponible, el valor inicial es auto, por lo que el navegador interpreta sus ítems y define su tamaño de manera automática,  si los elementos tienen un valor asignado, éste será tomado por flex-basis, si no tienen un tamaño establecido, al ser elementos flexibles dentro de un contenedor con display flex, estos elementos tomarán solo el tamaño necesario para mostrar su contenido.",
                    "La propiedad flex-grow es definida por un entero positivo, y se aplica a los ítems flex para que estos puedan crecer a partir de la medida de flex-basis, y así ajustar su tamaño para llenar el espacio sobrante del elemento contenedor, por ejemplo, si le damos a flex-grow el valor de 1, el elemento flex crecerá una fracción con base a la cantidad de espacio disponible, y los elementos que ocuparán ese espacio, si le ponemos 2, entonces el elemento tomará 2 fracciones y así consecutivamente.",
                    "La propiedad flex-shrink es definida con un entero positivo al igual que flex-grow con la diferencia de que este es el encargado de definir la cantidad que se va a encoger un elemento sobre su valor base tomado por flex-basis, como con flex-grow, un número mayor indica que tanto se contraerá un elemento y que tan rápido; a mayor número más rápido se encogerá.",
                    "La propiedad flex es una abreviación de las propiedades aplicadas a los ítems, la cual recibe 3 valores donde el primero hace referencia a flex-grow, la segunda referencia a flex-shrink y la última hace referencia a flex-basis de los elementos.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            }
        ],
        "list": [
            {
                "title": "4 propiedades para manipulación de ítems",
                "items": [
                    "Flex-grow",
                    "Flex-shrink",
                    "Flex-basis",
                    "Flex"
                ]
            }
        ]
    },
    {
        "name": "Ubicación y saltos de líneas",
        "father": "",
        "principal": [
            ""
        ],
        "examples": [
            {
                "title": "Mostrando bases de ejes y límites",
                "iframes": "https://codepen.io/SincoSemillero/pen/ZEGxzVv",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando definimos flex-direccion hay que tener en cuenta 2 cosas, la primera es el eje principal que queremos tener, y la segunda es sobre qué línea límite queremos que empiece nuestro contenido, es decir, que si queremos que nuestro contenido se organice por filas, de izquierda a derecha, la propiedad que deberíamos usar seria row, si queremos que la dirección sea de derecha a izquierda, igualmente en filas, la propiedad a usar sería la de row-reverse.",
                    "Si queremos que la distribución principal sea por columnas, de arriba hacia abajo seria column, y de abajo hacia arriba seria column-reverse.",
                    " ",
                    "Ahora para los saltos de línea, flexbox trae por defecto la propiedad wrap, que es la que nos permite que un elemento salte a la siguiente fila/columna si su tamaño no cabe dentro de los limites, sin embargo si no queremos esto, y en su lugar queremos que los elementos se encojan adaptándose a los limites, habría que setear otra propirdad a cada elemento, que veremos más adelante, para que estos se adapten según la situación.",
                    "Al usar no wrap, hay que dar a los elementos la propiedad de encogerse si es necesario, de lo contrario estos elementos podrían verse desbordados del borde de su contenedor. ",
                    "Y por último existe la propiedad flex-flow, que es una abreviatura que recibe, flex-direction en su primer valor y después recibe el valor de felx-wrap todo en una sola línea.",
                    "Para un poco más de información, dirijase a los siguientes Links de apoyo."
                ],
                "Links": ""
            },
            {
                "conclusionsT": "Links de apoyo",
                "Links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/CSS_Flexible_Box_Layout/Conceptos_Basicos_de_Flexbox"
                ]
            }
        ],
        "list": [
            {
                "title": "Valores posibles de flex-direction",
                "items": [
                    "row: filas de línea inicial hacia la línea final.",
                    "row-reverse: filas invertidas, de línea final hacia línea inicial.",
                    "column: columnas de línea superior hacia línea inferior.",
                    "column-reverse: columnas invertidas línea inferior hacia línea superior."
                ]
            },
            {
                "title": "Valores posibles de flex-wrap",
                "items": [
                    "wrap",
                    "nowrap"
                ]
            }
        ]
    },
    {
        "name": "Flex-box",
        "father": "",
        "principal": [
            "Flexbox es un sistema de layouts basado en modelo de cajas flexibles, que se ubican mediante 2 ejes que se pueden definir usando  propiedades específicas de Flex, además de ser una herramienta súper útil para organizar elementos en la pantalla de una manera, también es una herramienta que dan ganas de aprender, no solo por ser intuitiva, sino por sus propiedades que le dan un comportamiento a todo el layout."
        ],
        "list": [
            {
                "title": "Las propiedades más básicas de Flexbox se dividen en:",
                "items": [
                    "Ejes-contenedor-líneas.",
                    "Ubicación y saltos de fila/columna.",
                    "Propiedades a aplicadas a los ítems.",
                    "Alineación justificación y distribución del espacio entre ítems."
                ]
            }
        ]
    }
]