[
    {
        "name": "Introducción a CSS",
        "father": "",
        "principal": [
            "Las hojas de edtilo en cascada son el componente de el diseño web que se encarga de diseñar el estilo principal de un sitio web, dando entrada a muchas tecnologias nuevas que en conjunto dan entrada a un solo objetivo principal DISEÑAR LA VISTA DE UNA PAGINA WEB",
            "el css se divide en don grandes ramas que en conjunto dan origen a las famosas reglas de CSS, estas son :",
            "SELECTORES y PROPIEDADES",
            "donde los selectores son la forma de buscar en el documento el elemento al cual le vamos a aplicar una regla de CSS y las propiedades van a ser los diseños de estilo que se aplican dentro de una regla",
            "Aunque los selectores se clasifican en unos grupos selectos, las propiedades son todo lo contrario"
        ],
        "examples": "",
        "conclusions": [
            {
                "conclusionsT": [
                    "el mundo de CSS es enorme  y requiere una curva de aprendizaje un poco especial ,ya que, si bien es cierto que se pueden realizar buenos diseños usando un desempeño basico y estandarizado, tembien es cierto que evolucionar esta tegnología a un nivel mas profecinalizado, requiere de mucho estudio y de muchas horas de practica para hacer obras de arte jugando con los diseños de una pagina web",
                    "tambien quiero añadir que con Css nativo sin usar algun tipo de framework, se pueden crear diceños increibles y hacer todo lo que la imaginacion te ordene, siempre y cuando conozcas el potencial que te ofrece un lenguaje de diseño tan grande como lo es CSS"
                ],
                "links": ""
            }
        ],
        "list": [
            {
                "title": "selectores",
                "items": [
                    "selectores basicos",
                    "selectores hacia Pseudo-elementos",
                    "selectores con pseudo clases",
                    "selectores dentro de reglas"
                ]
            },
            {
                "title": "propiedades pricipales",
                "items": [
                    "background",
                    "with",
                    "height",
                    "font-family",
                    "font-size",
                    "diplay",
                    "color",
                    "margin",
                    "padding",
                    "border",
                    "ETC"
                ]
            }
        ]
    },
    {
        "name": "Selectores básicos",
        "father": "",
        "principal": [
            "los selectores de css, son los encargado de especificar propiedades, a uo o varios elementos de un HTML, sin embargo estos se dividen en , selectores Basicos, Pseudo Selectores, y Selectores anidados",
            "Selectores Basicos son todos aquiellos, que se entiendes de una manera sencilla ya que estos suelen ser, el nombre de una etiqueta de HTML, o tambien pueden ser, una Clase o ID de un elemento de HTML utilizando la siguiente estructura para su uso "
        ],
        "examples": [
            {
                "title": "demostracion Selectores CSS",
                "iframes": "https://codepen.io/edwin0211/embed/oNgMxYK?height=265&theme-id=dark&default-tab=css,result",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "en conclucion, los selectores basicos, son heramientas utiles, para empezar a aplicar estilos y diseños de manera rapida, a elementos de un HTML",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "links Apoyo",
                "links": [
                    "https://uniwebsidad.com/libros/css/capitulo-2/selectores-basicos",
                    "https://uniwebsidad.com/libros/css-avanzado/capitulo-3"
                ]
            }
        ],
        "list": [
            {
                "title": "selectores mas conocidos",
                "items": [
                    "selector por etiqueta = nombre_etiqueta{Propiedad:valor;}",
                    "selector por clase = .clase_del_elemento{Propiedad:valor;}",
                    "selector por ID =   #ID_del_eñemento{Propiedad:valor;}"
                ]
            },
            {
                "title": "tipos de selectores",
                "items": [
                    "selector de hijos",
                    "selector adyacente",
                    "selector de atributos"
                ]
            }
        ]
    },
    {
        "name": "Pseudo Selectores",
        "father": "",
        "principal": [
            "Una pseudoclase CSS es una palabra clave que se añade a los selectores y que especifica un estado especial del elemento seleccionado Por ejemplo,  :hover aplicará un estilo cuando el usuario haga hover sobre el elemento especificado por el selector",
            "Las pseudoclase, junto con los pseudoelementos, permiten aplicar un estilo a un elemento no sólo en relación con el contenido del árbol de documento, sino también en relación a factores externos como el historial del navegador (:visited, por ejemplo), el estado de su contenido (como :checked en algunos elementos de formulario), o la posición del ratón (como :hover que permite saber si el ratón está encima de un elemento o no)"
        ],
        "examples": [
            {
                "title": "Usando Pseudo Selector :Hover",
                "iframes": "https://codepen.io/edwin0211/embed/WNbKOLW?height=265&theme-id=dark&default-tab=css,result",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "en conclucion los Pseudo selectores y Pseudo clases son elementos, o eventos que podemos usar en css, para cambiar la apariencia de un elemento en un caso o evento especifico",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "links Apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes",
                    "https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos"
                ]
            }
        ],
        "list": [
            {
                "title": "Pseudo-Clases",
                "items": [
                    ":active",
                    ":cheked",
                    ":default",
                    ":first",
                    ":first-child",
                    ":focus",
                    ":hover",
                    ":target",
                    ":visited",
                    ":not()",
                    ":nth-child()",
                    ":only-of-type",
                    ":root"
                ]
            },
            {
                "title": "Pseudo-Elementos",
                "items": [
                    "::after",
                    "::before",
                    "::first-letter",
                    "::first-line",
                    "::selection",
                    "::backdrop",
                    "::placeholder",
                    "::marker",
                    "::spelling-error",
                    "::grammar-error"
                ]
            }
        ]
    },
    {
        "name": "Background",
        "father": "",
        "principal": [
            "Iniciando con lo principal de una regla de estilos CSS básica, vamos a hablar de la propiedad “Background”, la cual cuando uno inicia lo primero que realiza es cambiar el fondo usando esta propiedad y empezar a jugar con eso, con el fondo de un documento HTML.",
            "Pero al ser una propiedad tan aparentemente fácil, trae consigo muchas cosas que se desconocen como por ejemplo un fondo en degrade, o un mosaico, o cosas así por el estilo, como poner una foto de fondo, y que esta no se repita y cubra la totalidad de la pantalla y demás.",
            "Los fondos son de las herramientas más básicas y principales, pero también una de las que posee más propiedades con las que podemos jugar."
        ],
        "examples": [
            {
                "title": "cambiando color background-usando hover",
                "iframes": "https://codepen.io/edwin0211/embed/LYEvKam?height=265&theme-id=dark&default-tab=html,result",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "El background nos ayuda a realizar diseños únicos, además de darnos la posibilidad de poder manipular cada elemento de un documento HTML en cuanto al fondo del elemento .",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "linsk de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/background",
                    "https://aprende-web.net/css/css5_3.php"
                ]
            }
        ],
        "list": [
            {
                "title": "sub-propiedades Background",
                "items": [
                    "background-attachment",
                    "background-color",
                    "background-image",
                    "background-position",
                    "background-repeat",
                    "background-size",
                    "background-clip",
                    "background-origin",
                    "background-position-x",
                    "background-position-y",
                    "background-blend-mode"
                ]
            }
        ]
    },
    {
        "name": "Width  y Height",
        "father": "",
        "principal": [
            "Una de las herramientas básicas que se usa también bastante son las de dimensionamiento de elementos, para esto utilizamos 2 propiedades enfocadas a ello y unas unidades de medida.",
            "Las propiedades son Width y Height que nos representan ancho y alto de un elemento en la parte visual del mismo, y podremos jugar con sus sub propiedades combinándolas con otras propiedades que veremos un poco más adelante",
            "Para hacer uso de estas propiedades debemos tener en cuenta que tenemos las siguientes sub-propiedades y unidades de medida."
        ],
        "examples": [
            {
                "title": "dimencionamiento de elementos con widht y height",
                "iframes": "",
                "images": "../images/css/medidascss.svg"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "cuando hablamos de dar dimensiones a un elemento, podemos hacerlo de muchas formas dependiendo de la situación, usando las propiedades widht y height y haciendo variaciones entre las unidades de medida disponibles que nos ofrece CSS",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "links de apoyo",
                "links": [
                    "https://platzi.com/blog/unidades-de-medida-en-css/",
                    "https://www.w3schools.com/css/css_dimension.asp"
                ]
            }
        ],
        "list": [
            {
                "title": "sub-prorpiedades de widht y height",
                "items": [
                    "max-width: declara el ancho maximo que tendra un elemento",
                    "min-width: declara el ancho minimo que tendra un elemento",
                    "max-height: declara el alto maximo de un elemento",
                    "min-height: declara el alto minimo de un elemento"
                ]
            },
            {
                "title": "unidades de medida - absolutas",
                "items": [
                    "cm: centimetros",
                    "mm: milimetros",
                    "in: pulgadas (1in = 96px-2.54cm)",
                    "px: pixeles",
                    "pt: puntos (1pt = 1/72 de 1 in)",
                    "pc: picas (1pc = 12pt aproximadamente)"
                ]
            },
            {
                "title": "unidades de medida-relativas",
                "items": [
                    "em: relativo al tamaño de la fuente de un elemento",
                    "ex: aumente con relacion a la altura de la letra",
                    "Rem: aumenta sobre el tamo de fuente raiz",
                    "vw: porcentaje relativo al ancho de viewport",
                    "vh: porcentaje relativo a la altura de viewport",
                    "vmin: toma el menor valor entre vw y vh",
                    "vmax: toma el mayor valor entre vw y vh",
                    "%: base principal de unidades relativas",
                    "fr: unidad relativa a fracciones de pantalla mas usada en Layouts"
                ]
            }
        ]
    },
    {
        "name": "Propiedades Font- y Color",
        "father": "",
        "principal": [
            "Continuando con las propiedades básicas de CSS, le corresponde el turno a las propiedades de fuente y a la propiedad de color de fuente.",
            "Empezando por las propiedades de fuente, estas son reconocidas por contener en su nombre el prefijo  Font- lo que nos facilita un poco más saber que parte de la fuente vamos a modificar exactamente.",
            "Por otra parte, está la propiedad Color, que es la que se encarga de dar el color de la fuente en una regla de CSS."
        ],
        "examples": [
            {
                "title": "canbianto estilo y tamaño de fuente",
                "iframes": "https://codepen.io/edwin0211/embed/yLyWRvx?height=265&theme-id=default&default-tab=css,result",
                "images": ""
            },
            {
                "title": "diseño sin fuente",
                "iframes": "",
                "images": "../images/css/Font-color_1_sinFuente.png"
            },
            {
                "title": "diseño con fuente",
                "iframes": "",
                "images": "../images/css/Font-color_2_conFuente.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Como nos pudimos dar cuenta en las imágenes anteriores, las propiedades de Font pueden significar un gran cambio en el diseño de una página o una vista, haciéndola lucir de una manera completamente diferente solamente con cambiar la fuente aplicada.",
                    "Además de la propiedad Font el color también puede ser un cambio significativo en un diseño, ya que la misma nos da tener un diseño bien organizado dentro de una página web si el color de la letra se confunde con el fondo y no es legible.",
                    "Entonces jugar no solo con el diseño de la fuente, sino también jugar con el color de la letra y el contraste con el fondo son las bases principales para lograr un contenido claro y legible.",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/font",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
                ]
            }
        ],
        "list": [
            {
                "title": "propiedades  Font- de valor individual",
                "items": [
                    "font-style",
                    "font-variant",
                    "font-weight",
                    "font-size",
                    "font-family"
                ]
            }
        ]
    },
    {
        "name": "Propiedades de display",
        "father": "",
        "principal": [
            "La propiedad display es la encargada de mostrar  los elementos, ya que dependiendo del valor aplicado a un elemento, este puede cambiar o no su comportamiento y su forma de verse en la pantalla.",
            "Los valores de la propiedad display se dividen según su comportamiento, estas pueden ser: Outside - Inside - Listitem - Internal - box - legacy  y globales",
            "A continuación podremos ver los valores de display según su categoría"
        ],
        "examples": [
            {
                "title": "Jugando con algunos valores de display",
                "iframes": "https://codepen.io/edwin0211/embed/gObNbNp?height=265&theme-id=default&default-tab=html,result",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Como pudimos darnos cuenta en el ejemplo anterior, la propiedad display nos ayuda a acomodar  los elementos en la pantalla de diferentes maneras.",
                    "Hay que tener en cuenta que hay elementos a los cuales les cambia su estilo de diseño por defecto, como lo es el caso de las listas, sin embargo eso no es impedimento para jugar un poco con la propiedad display",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "linsk de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/display",
                    "https://www.lawebera.es/xhtml-css/css-avanzado-propiedad-display.php"
                ]
            }
        ],
        "list": [
            {
                "title": "display-outside",
                "items": [
                    "block",
                    "inline",
                    "run-in"
                ]
            },
            {
                "title": "display-inside",
                "items": [
                    "flow",
                    "flow-root",
                    "table",
                    "flex",
                    "grid",
                    "ruby",
                    "subgrid"
                ]
            },
            {
                "title": "display-outside + display-inside",
                "items": [
                    "block flow",
                    "inline table",
                    "flex run-in"
                ]
            },
            {
                "title": "display-listitem",
                "items": [
                    "list-item",
                    "list-item block",
                    "list-item inline",
                    "list-item flow",
                    "list-item flow-root",
                    "list-item block flow",
                    "list-item block flow-root",
                    "flow list-item block"
                ]
            },
            {
                "title": "display-internal",
                "items": [
                    "table-row-group",
                    "table-header-group",
                    "table-footer-group",
                    "table-row",
                    "table-cell",
                    "table-column-group",
                    "table-column",
                    "table-caption",
                    "ruby-base",
                    "ruby-text",
                    "ruby-base-container",
                    "ruby-text-container"
                ]
            },
            {
                "title": "display-box",
                "items": [
                    "contents",
                    "none"
                ]
            },
            {
                "title": "display-legacy",
                "items": [
                    "inline-block",
                    "inline-table",
                    "inline-flex",
                    "inline-grid"
                ]
            },
            {
                "title": "valores globales",
                "items": [
                    "heredar",
                    "initial",
                    "unset"
                ]
            }
        ]
    },
    {
        "name": "Margin, Padding y Border",
        "father": "",
        "principal": [
            "Siguiendo con las propiedades básicas, esta vez nos adentramos un poco en la base para los modelos de cajas,  y espaciado de elementos.",
            "Empecemos con la propiedad border, ya que esta es la que nos va a delimitar un elemento, para poder hacer visual el tamaño del elemento y sus límites de contenido, además de ayudarnos a comprender las dos siguientes propiedades.",
            "Continuamos con la propiedad margin, esta nos ayuda a dar un espaciado entre los elementos, pero aplicado del borde del elemento hacia su exterior, es decir, la propiedad margin separa a los elementos desde su borde hacia afuera, una distancia que nosotros predefinamos.",
            "Seguimos con el padding, esta propiedad realiza una acción similar al margin, con la diferencia de que este espaciado lo va a hacer entre el elemento principal y sus elementos internos, es decir, desde el borde hacia la parte interna del elemento",
            "Normalmente cuando inspeccionamos un documento HTML desde el navegador y seleccionamos un elemento nos saldrán estas propiedades en señaladas en colores, dependiendo el elemento estas propiedades van a cambiar.",
            "Las formas de definir los tamaños de estas propiedades es la de la siguiente manera: Estas propiedades reciben 4 valores que corresponde a top-right-bottom-left en ese orden, aunque si queremos algo más práctico, podemos definir solo 2 valores que aran referencia a top-bottom//left-right  en ese orden, o también se puede definir un solo valor, que se aplicara de manera global, pero también hay sub-propiedades que podremos aplicar a un solo lado o en caso de el borde, un estilo especifco tambien, de manera específica estas sub-propiedades son:"
        ],
        "examples": [
            {
                "title": "propiedades Margin-Border-Padding visualmente",
                "iframes": "",
                "images": "../images/css/xaml-layout-margins-padding.svg"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "En la imagen anterior se nota un poco más claro los espacios que ocuparía un elemento dependiendo de sus propiedades, además de mostrar un mapeo más claro de que es lo que estamos manipulando al modificar las propiedades margin, border y padding",
                    "Además de hacer un pequeño repaso de estas propiedades,  y dar un pequeño vistazo de todo lo que se puede hacer únicamente usando box-model para posicionar mejor nuestros elementos",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "linsk de apoyo",
                "links": [
                    "https://docs.microsoft.com/es-es/windows/uwp/design/layout/alignment-margin-padding",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/margin",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/padding",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/border"
                ]
            }
        ],
        "list": [
            {
                "title": "Propiedades Margin- ,padding-",
                "items": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ]
            },
            {
                "title": "propiedades border-",
                "items": [
                    "bottom",
                    "top",
                    "right",
                    "left",
                    "color",
                    "image",
                    "radius",
                    "style",
                    "width"
                ]
            }
        ]
    },
    {
        "name": "propiedades float y clear",
        "father": "",
        "principal": [
            "Float es una propiedad que sirve para alinear elementos en la pantalla, usando como referencia el eje x de la pantalla, para posicionarse bien sea todo a la derecha o la izquierda.",
            "En conjunto con float se encuentra la propiedad clear, que se usa cuando queremos que un elemento que tenga un flotante cerca, deje de posicionarse junto a el",
            "Usando estas 2 propiedades podemos posicionar de una manera más limpia los elementos de un documento HTML, sin embargo, hay que tener en cuenta que float y clear cuentan con una restricción que los limita a usar únicamente, el espacio más pegado a la derecha o a la izquierda usando left y right"
        ],
        "examples": [
            {
                "title": "Posicionamiento con float",
                "iframes": "",
                "images": "../images/css/float.png"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando usamos float podríamos causar un conflicto de estilo, así que no es tan eficiente usarlo, ya que existen opciones mejores, sin embargo si logras dominarlo podría ser una gran herramienta  para posicionar imágenes dentro de un párrafo, o dejar un botón fijo en algún lado de la pantalla",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "linsk de apoyo",
                "links": [
                    "https://www.hazunaweb.com/curso-de-css/float-y-clear/",
                    "https://developer.mozilla.org/en-US/docs/Web/CSS/float"
                ]
            }
        ]
    },
    {
        "name": "Propiedad Position",
        "father": "",
        "principal": [
            "La propiedad position es la encargada de alinear y ubicar los elementos en la pantalla cuando es requerido, hay 5 clases de position y además, trae consigo 5 propiedades que lo complementan",
            "A partir de usar la propiedad position ya podremos usar las propiedades de coordenada, que dependiendo del valor de position que estemos usando tendrán un comportamiento u otro",
            "Tanto como los valores de position, como las propiedades de coordenadas, las podremos ver a continuación."
        ],
        "examples": [
            {
                "title": "jugando con propiedades de poisicion",
                "iframes": "https://codepen.io/edwin0211/embed/gObNgqd?height=265&theme-id=default&default-tab=html,result",
                "images": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": [
                    "Cuando un objeto tiene posición relativa, este se mantiene en el flujo normal del documento, se posiciona en una ubicación por defecto, y tomando ese punto de partida como referencia, se desplaza hacia las coordenadas que le definamos las propiedades designadas para ello,",
                    "Cuando un elemento tiene posición absoluta, este sale del flujo normal del documento, y no se crea un espacio para él, en su lugar, este toma como referencia para ubicarse por coordenadas, los bordes del elemento que lo contengan, es decir, usara los bordes de su elemento padre, para ubicarse a partir de ahí ",
                    "Cuando un elemento tienen posición fixed, este es sacado del flujo normal del documento, y en su lugar es ubicado en una ubicación fija dada por coordenadas, pero, a diferencia de la posicion absoluta, fixed toma como referencia los bordes del ViewPort o la ventana que lo contenga, además cuando un elemento es fixed, este no se verá afectado por el scroll, manteniéndose siempre en una misma posición",
                    "Cuando un elemento tiene posición sticky, este se mantiene en el flujo normal del documento y es ubicado por el mismo, sin embargo, las coordenadas, sirven para indcar un tope, del cual el objeto no se moverá más, es decir, si el elemento se ve afectado por scroll, este se moverá hasta llegar a ese tope dado por coordenadas, y se quedara fijo hasta que vuelva a su posición normal,  nuevamente ubicado en el lugar donde arranco por defecto junto a los elemento que se encontraba antes de ser afectado por el scroll",
                    "Para un poco más de informacion, dirijase a los siguientes links de apoyo."
                ],
                "links": ""
            },
            {
                "conclusionsT": "linsk de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/CSS/position"
                ]
            }
        ],
        "list": [
            {
                "title": "tipos de posiciones de la propiedad position",
                "items": [
                    "relative ",
                    "absolute ",
                    "fixed",
                    "sticky",
                    "static"
                ]
            },
            {
                "title": "propiedades de coordenada",
                "items": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "z-index"
                ]
            }
        ]
    },
    {
        "name": "Historia de Javascript",
        "principal": [
            "Mosaic Communications Corporation fue una compañía fundada el 4 abril de 1994 siendo una de las primeras compañías en trabajar sobre la World Wide Web, posteriormente cambia su nombre a NETSCAPE COMMUNICATIONS CORPORATION el 14 de noviembre del mismo año.",
            "Uno de los principales desarrollos de la compañía fue crear un navegador que incluyera soporte para comercio electrónico también fuera intuitivo para el usuario final y que permitiera un lenguaje fácil de usar por los desarrolladores.",
            "Su inspiración fue algo que había estado en el Macintosh llamado HiperCard, era una aplicación simple basada en una metafora de pila de tarjetas, esta aplicación era una secuencia de comandos impulsada por eventos siendo notablemente sencillo de usar.",
            "Netscape quería algo así en el navegador web, entonces le dieron ese trabajo a Brendan Eich, él tenia la idea de hacer un interprete de Scheme (esquema) pero no era un lenguaje que le gustara a la gente.",
            "Brendan Eich se tardó 10 días en hacer el primer prototipo del lenguaje llamado LiveScript el cual basó su sintaxis en Java, usando las funciónes lambdas de Scheme que es un dialecto de Lisp un lenguaje desarrollado por MIT y sacando la simplicidad de las expresiones de otro lenguaje llamado Self, desarrollado inicialmente por Xerox PARC y después por SUN LABS.",
            "Mientras eso ocurría otro lenguaje estaba siendo desarrollado en Sun por Jim Gosling, él empezo con algo llamado 'Green Talk', luego fue trasladado a una nueva compañía que estaba desarrollando un lenguaje llamado 'Oak' pero esa compañía falló en su intento.",
            "Jim Gosling estuvo de vuelta a Sun, intentando hacer algo con el lenguaje que venía desarrollando antes de su traslado, en ese momento la internet se estaba volviendo muy popular y Sun quería estar en primera fila de ese acontecimiento. Sun lanzó un navegador en el lenguaje de Jim Gosling, llamado HotJava, teniendo mucho éxito al menos por un corto tiempo.",
            "El nombre del lenguaje utilizado para ese navegador era 'Java', convirtiendose en un gran éxito, Sun estaba haciendo ruido que el lenguaje Java sería el futuro del software, si se diseñan todos los programas dirigidos a la máquina virtual de Java en lugar del sistema operativo para liberarse de Microsoft, ese fue un mensaje éxitoso. Sabemos que el lanzamiento de Java es el más importante de la historia.",
            "En Netscape estaban haciendo anuncios similares: si tu diseñas las aplicaciones dirigidas al navegador web no tendrían problemas con el sistema operativo y de nuevo podemos liberarnos de Microsoft, las dos compañías se dieron cuenta que si estaban antes de Microsoft podrían probablemente trabajar juntas porque si no lo hacían, Microsoft los podía poner en contra entre ellos y ambos perderían. Entonces formularon una alianza entre Sun y Netscape.",
            "La primera cosa en la que estan de acuerdo es que Netscape adiciona Java al navegador y en cambio Sun dejará el navegador HotJava, el cual no estaba muy completo, de cualquier manera, entonces era fácil aceptar ese primer paso.",
            "Segundo paso, Sun dice que Netscape debe acabar con el lenguaje LiveScript porque Java es el lenguaje de programación que se necesita y no puede introducir un nuevo lenguaje. Netscape rechazó acabarlo por dos razones:",
            "Ellos querían un lenguaje para principiantes y Java necesita mucho conocimiento específico para solo escribir 'Hello World', ellos querían algo con una curva de aprendizaje más corta, ademas tenían también un problema práctico, Sun querían lanzar un nuevo navegador de una vez y la manera de poner a Java a hablar con LiveScript en el navegador de NETSCAPE era mediante una interfaz llamada Live Connect y así LiveScript podría hablar con el navegador y Java comunicarse con LiveScript mediante esa interfaz, si ellos sacan LiveScript Java no podria funciónar ya que retrazaría el lanzamiento del nuevo navegador pero no podrían permitirse esperar mucho tiempo, por tal motivo su alianza resultó ser un impasse.",
            "Entonces uno de los fundadores de Netscape, tal vés como una broma sugiere un cambio de nombre de LiveScript a JavaScript y eso no sería un nuevo lenguaje pero si como un subconjunto de Java, Java interpreto que era una tontería, entonces Sun salió y dió una rueda de prensa en la cual ellos desmintieron la relación de esos dos lenguajes.",
            "Mientras tanto Microsoft estuvo anunciando que esas dos compañías en California estaban buscando destruir a Microsoft pero ellos no estaban listos para eso, pero Microsoft perdio completamente la web y la internet, ellos pensaron que el futuro de las telecomunicaciones iba a producirse sobre la televisión por cable.",
            "De tal manera surge uno de los lenguajes más utilizados de la historia con la verasatilad de funciónar en el navegador y más recientemente a nivel del sistema operativo con la aparición de NodeJs. "
        ],
        "list": [
            {
                "title": "Caraterísticas del lenguaje",
                "items": [
                    "Es un lenguaje orientado a objetos, basado en prototipos (no clases) y multiparadigma",
                    "No tiene clases como tal.",
                    "Es débilmente Tipado",
                    "Permite comparar datos de diferentes tipos",
                    "Se puede utilizar del lado del cliente o del servidor",
                    "Es un lenguaje interpretado",
                    "Es un superconjunto del lenguaje ECMAScript",
                    "Es un lenguaje dinámico es decir que las operaciones realizadas en tiempo de compilación pueden también realizarse en tiempo de ejecución."
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://www.youtube.com/watch?v=DogGMNBZZvg",
                    "https://es.wikipedia.org/wiki/JavaScript",
                    "https://es.wikipedia.org/wiki/Netscape_Communications_Corporation"
                ]
            }
        ]
    },
    {
        "name": "Estructuras de datos",
        "father": "",
        "principal": [
            "La estructura de un dato es la forma particular de organizar datos en un computador para poder ser utilizados eficientemente.",
            "Todos los lenguajes de programación tienen sus propias estructuras de datos y JavaScript no es la excepción, tiene varios tipos de datos que se van a listar a continuación: "
        ],
        "examples": [
            {
                "title": "Tipos Dinámicos",
                "iframes": "",
                "images": "../images/js/tipoDinamico.PNG"
            }
        ],
        "list": [
            {
                "title": "Tipos de Datos",
                "items": [
                    "string : Secuencia de caracteres para representar un texto",
                    "number : Es un tipo de dato que representa números",
                    "boolean : Es un dato lógico que toma el valor de true o false",
                    "null : Representa la referencia a un dato vacío",
                    "undefined : Este valor se le asigna a las variables que no se han inicializadas",
                    "symbol : Es un tipo de dato primitivo cuya instancia tiene una forma única legible por humanos.",
                    "Object : Es un conjunto de propedades con formato clave valor, puede contener funciónes o datos."
                ]
            },
            {
                "title": "Tipos Dinámicos",
                "items": [
                    "JavaScript es un lenguajes débilmente tipado o dinámico, es decir que para declarar una variable no se debe determinar el tipo de dato, esta característica nos da la posibilidad de tener la misma variable con diferentes tipos y se usará según la ejecución del programa."
                ]
            },
            {
                "title": "Colecciones Indexadas",
                "items": [
                    "Arrays : Son objetos que pueden almacenar listas o sets de datos, la longitud de un array y los tipos de sus elementos en JavaScript no son fijos."
                ]
            },
            {
                "title": "JSON - JavaScript Object Notation",
                "items": [
                    "Es una estructura de dato universal y lijera, permite serializar objetos javaScript aunque algo JavaScript no es JSON, y algo JSON no es JavaScript.",
                    "Su origen es a partir de JavaScript pero es utilizado por otros lenguajes de programación."
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Data_structures",
                    "https://es.wikipedia.org/wiki/Estructura_de_datos",
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/JSON"
                ]
            }
        ]
    },
    {
        "name": "Tipos de datos primitivos",
        "principal": [
            "Los tipos primitivos son un dato que no es un objeto y no tiene métodos. Todos los datos primitivos definen tipos inmutables es decir: que el estado del dato no puede ser modificado una vez que es creado",
            "Los tipos primitivos en JavaScript son seis: string, number, boolean, null, undefined y symbol, hasta el standart ECMAScript 2015",
            "Exceptuando null y undefined, todos los valores primitivos tienen objetos equivalentes que se envuelven alrededor de los valores primitivos los cuales si tienen métodos como:",
            "'constructor' y otros más según las características del objeto.",
            "Dado que JavaScript convierte automáticamente entre tipos primitivos y objetos envolventes podemos usar cualquiera de los métodos de los objetos envolventes en un dato primitivo. La operación que realiza JavaScript en este caso es convertir el dato primitivo en su equivalente de objeto envolvente haciendolo temporal para poder usar sus métodos y luego lo desecha"
        ],
        "examples": [
            {
                "title": "JavaScript crea un Objeto envoltorio Boolean que envuelve el dato primitivo para cambiar su valor:",
                "iframes": "",
                "images": "../images/js/objEnvoltorio.PNG"
            }
        ],
        "list": [
            {
                "title": "Datos primitivos",
                "items": [
                    "string",
                    "number",
                    "boolean",
                    "null",
                    "undefined",
                    "symbol"
                ]
            },
            {
                "title": "Objetos primitivos envolventes",
                "items": [
                    "String",
                    "Number",
                    "Boolean",
                    "Symbol"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Glossary/Primitivo",
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/String",
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Data_structures",
                    "https://es.wikipedia.org/wiki/Objeto_inmutable"
                ]
            }
        ]
    },
    {
        "name": "Objetos JSON",
        "principal": [
            "Es un formato de texto ligero para intercambio de información de fácil lectura y escritura para los humanos y las maquinas"
        ],
        "examples": [
            {
                "title": "Estructura JSON",
                "iframes": "",
                "images": "../images/js/json.PNG"
            }
        ],
        "list": [
            {
                "title": "Sintaxis :",
                "items": [
                    "Los nombres de las propiedades deben tener doble comilla",
                    "Las propiedades se separan con comas (,)",
                    "No se debe utiliar la coma final si es la última propiedad del objeto.",
                    "Los ceros a la izauierda están prohibidos, un decimal debe ser seguido por lo menos por un digito.",
                    "Los valores que son cadenas de texto deben estar entre comillas dobles"
                ]
            },
            {
                "title": "Está costruido sobre dos estructuras:",
                "items": [
                    "Una colección de pares de nombre y valor.",
                    "Una lista ordenada de valores."
                ]
            },
            {
                "title": "Métodos para análizar y construir valores:",
                "items": [
                    "JSON.stringify() : Convierte un valor u objeto javascript en un cadena de texto JSON.",
                    "JSON.parce() : Análiza una cadena de texto JSON para transformarlo en su equivalente valor."
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/JSON",
                    "https://stuvera.com/ebooks/javascript-works-crockford/",
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/JSON/parse",
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/JSON/stringify"
                ]
            }
        ]
    },
    {
        "name": "Objeto Boolean",
        "principal": [
            "Es un objeto envoltorio del dato primitivo boolean",
            "Sintaxis : new Boolean(valor). El valor por defecto para un objeto Boolean será 'false', también podemos enviar un valor en el constructor que determine con que valor se va a inicializar",
            "Para poner un valor a un objeto Boolean debemos enviar: true o false sin comillas, es decir que si ponemos el valor 'false' con comilla obtendremos el valor true"
        ],
        "examples": [
            {
                "title": "Evaluar un objeto Boolean en una estructura condicional:",
                "iframes": "https://codepen.io/cmrow/embed/dyPBooB?height=265&theme-id=default&default-tab=html,result",
                "images": ""
            },
            {
                "title": "Cambiar un string a un boolean:",
                "iframes": "",
                "images": "../images/js/stringToBool.PNG"
            },
            {
                "title": "Inicializar un objeto Boolean con un string:",
                "iframes": "",
                "images": "../images/js/initObjBoolean.PNG"
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Boolean"
                ]
            }
        ]
    },
    {
        "name": "Objeto String",
        "principal": [
            "Este objeto encapsula el tipo de dato primitivo string, de esta forma las cadenas de texto que se declaren tomarán las propiedades y métodos de String object.",
            "En JavaScript las variables de texto son objetos de tipo String"
        ],
        "examples": [
            {
                "title": "",
                "iframes": "",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "",
                "items": [
                    ""
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/String",
                    "https://www.aprenderaprogramar.com/index.php?option=com_content&view=article&id=822:funciónes-javascript-cadenas-texto-tolowercase-charat-substring-split-replace-replaceall-indexof-cu01142e&catid=78&Itemid=206",
                    "https://devdocs.io/javascript-string/"
                ]
            }
        ]
    },
    {
        "name": "Objeto Number",
        "principal": [
            ""
        ],
        "examples": [
            {
                "title": "",
                "iframes": "",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "",
                "items": [
                    ""
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Number"
                ]
            }
        ]
    },
    {
        "name": "Objecto Symbol",
        "principal": [
            "Es un tipo de dato primitivo cuya instancia tiene una forma única legible por humanos.",
            "Un symbol puede ser utilizado como identificador"
        ],
        "examples": [
            {
                "title": "",
                "iframes": "",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "",
                "items": [
                    ""
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "",
                "links": ""
            }
        ]
    },
    {
        "name": "Sintaxis",
        "father": "",
        "principal": [
            "Se define como las normas con las cuales se debe escribir el lenguaje para considerarse correcto. La sintaxis de JS es parecida a Java desde sus origenes."
        ],
        "examples": [
            {
                "title": "",
                "iframes": "",
                "links": ""
            }
        ],
        "conclusions": [
            {
                "conclucionsT": [],
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Características generales del lenguaje",
                "items": [
                    "No se tiene en cuenta los espacios en blanco ni las nuevas líneas.",
                    "Se distinguen las mayúsculas de las minúsculas",
                    "No se define el tipo de variables",
                    "No es necesario terminar cada sentencia con el caráter punto y coma ';' ",
                    "Los comentario de una sola línea se definen con '//' ",
                    "Los comentario de una varias líneas se definen con '/* líneas */' "
                ]
            },
            {
                "title": "Identificadores de variables",
                "items": [
                    "Empieza con una letra o guion bajo '_' o símbolo de dolar '$'.",
                    "Puede seguir cero, mas letras, dígitos, guion bajo '_' o símbolo de dolar '$'",
                    "Por convención, todas las variables, parámetros, miembros y nombres de funciones empiezan con letra minúscula.",
                    "Excepto para las funciones constructoras que empiezan con mayúscula.",
                    "Iniciar con guion bajo '_' debe ser reservado para implementaciones ",
                    "El símbolo de dolar '$' debe ser reservado para maquinas "
                ]
            }
        ]
    },
    {
        "name": "Declaración de funciones",
        "principal": [
            "Una declaración de función o 'function statement' es un bloque de código diseñado para llevar a cabo con una tarea específica",
            "Estas funciones se ejecutan cuando son llamadas a hacer su propósito"
        ],
        "examples": [
            {
                "title": "Declararemos algunas diferentes funciones para ver la estructura claramente",
                "iframes": "https://codepen.io/James25/embed/KKpPqEb?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Una Declaración de Función viene compuesta de 3 partes",
                "items": [
                    "La declaración 'function' y el nombre que le asignaras a la función",
                    "Los argumentos que utilizara la función, estos van adentro de (), puede ser opcional",
                    "El cuerpo de la función, aquí es donde utilizará los parámetros pasados para crear su funcionalidad, esto va adentro de llaves {}"
                ]
            },
            {
                "title": "Una función puede llamarse a ejecutar su funcionalidad de varias maneras:",
                "items": [
                    "Cuando ocurre un evento, por ejemplo cuando el usuario hace un click",
                    "Cuando se invoca desde código JavaScript",
                    "Cuaado se ejecuta automáticamente"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
                    "https://www.w3schools.com/js/js_functions.asp"
                ]
            }
        ]
    },
    {
        "name": "Arrow functions",
        "principal": [
            "'Arrow functions' o 'funciones de flecha' fueron implementadas a partir de 'ECMAScript6'",
            "Estas funciones de flecha son la alternativa de una función regular para escribir sintaxis más corto",
            "Las arrow functions se declaran usando '=>' cual se parece una flecha y por eso se le dio el nombre",
            "Estas funciones se puede convertir aún más cortas! dependiendo la funcionalidad, esto lo veremos en un ejemplo"
        ],
        "examples": [
            {
                "title": "Declararemos algunas diferentes funciones de flecha para entender la sintaxis",
                "iframes": "https://codepen.io/James25/embed/zYGOEYd?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "funciones se puede convertir aún más cortas dependiendo el lo que quieras llevar a cabo",
                "items": [
                    "Funciones se puede acortar si no necesitan nombre, esto se llama una 'funciones anonimas' y se pueden utilizar con o sin complementarlas a una arrow functions",
                    "Las arrow functions automáticamente permite eliminar las palabras clave 'function' & 'return'",
                    "si solamente tienes un parámetro, permite eliminar los () que la envuelven",
                    "también se pueden eliminar los {} cunado solamente se ejecuta un sola instrucción"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
                    "https://www.w3schools.com/js/js_arrow_function.asp"
                ]
            }
        ]
    },
    {
        "name": "map()",
        "principal": [
            "La funcionalidad de este método de array puede ser separado en 3 simples pasos :",
            "El método recorre el 'arreglo' o 'array' asignado…",
            "Recibe una ‘condición o función’ que le aplicará a cada uno de los elementos de nuestro arreglo",
            "Finalmente,  map() nos crea un nuevo arreglo con los resultados de dicha condición o función"
        ],
        "examples": [
            {
                "title": "Utilizando el método map() recibiremos un arreglo de palabras le aplicaremos nuestra funcion map y para imprimir le aplicaremos la funcion forEach()",
                "iframes": "https://codepen.io/James25/embed/qBEGJjW?height=265&theme-id=default&default-tab=js,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "map() recibe 3 Parámetros",
                "items": [
                    "1 - Recibe el elemento del array que se está procesando",
                    "2 - Recibe el índice del elemento del array",
                    "3 - recibe el array en cual aplicara map()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/splice",
                    "https://www.w3schools.com/jsref/jsref_splice.asp"
                ]
            }
        ]
    },
    {
        "name": "reduce()",
        "principal": [
            "La funcionalidad de el método de array reduce() nos retorna un solo valor después de recorrer un array y aplicarle una función",
            "Utilizando un Acumulador guardara los valores en un solo espacio después de aplicarle la función",
            "Por defecto reduce() le asigna el primer valor del arreglo a nuestro primer parámetro, que será 'acumulador'",
            "Igualmente, por defecto el segundo elemento del arreglo se le asignara a el segundo para metro"
        ],
        "examples": [
            {
                "title": "Utilizando el método reduce() para añadir todos los números  de un arreglo a un solo valor",
                "iframes": "https://codepen.io/James25/embed/yLydyog?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "map() recibe 4 Parámetros",
                "items": [
                    "1 - Recibe una función que ejecutara en los elementos de el array",
                    "2 - Recibe un acumulador, que acumulara los valores retornados de nuestra funcion aplicada",
                    "3 - Recibe el índice en la posición del array que está recorriendo al momento",
                    "4 - recibe el array en cual aplicara reduce()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
                    "https://www.w3schools.com/jsref/jsref_reduce.asp"
                ]
            }
        ]
    },
    {
        "name": "concat()",
        "principal": [
            "El método 'concat()' lo que hace es unir dos arrays en un nuevo array sin cambiarlos.",
            "El nuevo arreglo será uno en cual primero ira el array en cual se le llamo concat() seguido por el parámetro recibido",
            " "
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo concat() para unir dos arreglos de diferentes tipos de data ",
                "iframes": "https://codepen.io/James25/embed/mdyZVLZ?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "concat() Parámetros",
                "items": [
                    "1 - se recibe arrays o valores que queremos concatenar en un nuevo array",
                    "... Si se llama este método de arreglo sin parámetros, el resultado será una copia del array en cual aplicamos concat()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
                    "https://www.w3schools.com/jsref/jsref_concat.asp"
                ]
            }
        ]
    },
    {
        "name": "every()",
        "principal": [
            "El método de matriz every() valida si todos los elementos de un array pasan una prueba o condición & Devuelve un valor booleano.",
            "Si alguno de los elementos en nuestro array no pasa la prueba, el valor devuelto será 'false' ",
            "Por el contrario, si todos los elementos cumplen nuestra prueba o condición, el valor devuelto será 'true'"
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo every() para validar si todos los elementos de un arreglo son mas grandes que 10 ",
                "iframes": "https://codepen.io/James25/embed/ZEYdbwQ?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "every() recibe 3 Parámetros",
                "items": [
                    "1 - Recibe el elemento del array que se está procesando",
                    "2 - Recibe el índice del elemento del array",
                    "3 - Recibe el array en cual aplicara every()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",
                    "https://www.w3schools.com/jsref/jsref_every.asp"
                ]
            }
        ]
    },
    {
        "name": "fill()",
        "principal": [
            "El método 'fill()' cambia los elementos de un array a un valor declarado",
            "con fill() se puede declarar desde un índice inicial hasta cual índice final quieres rellenar",
            ".. o puedes simplemente rellenar todos los espacios pasándole un solo parámetro que declare el valor estático que rellenara los espacios"
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo fill() rellenar un espacio especifico de un arreglo",
                "iframes": "https://codepen.io/James25/embed/rNaEejZ?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "fill() recibe 3 Parámetros",
                "items": [
                    "1 - Recibe el elemento que rellenara el arreglo",
                    "2 - Recibe la posición del índice a partir de cual quieres comenzar modificar",
                    "3 - Recibe otra posición del indicé, este segundo indicé indica hasta donde rellenara el array "
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
                    "https://www.w3schools.com/jsref/jsref_fill.asp"
                ]
            }
        ]
    },
    {
        "name": "filter()",
        "principal": [
            "El método 'filter()' nos crea un nuevo array con todos los elementos que pasen la prueba implementada por la función asignada",
            "filter() no ejecuta la función el array no tiene valores adentro",
            "si ningún elemento cumple con la prueba entonces nos creara un arreglo vacío"
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo filter() para crear un arreglo con números que sean de 4 caracteres o menos",
                "iframes": "https://codepen.io/James25/embed/dyPBpQa?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "filter() recibe 3 Parámetros",
                "items": [
                    "1 - Recibe el elemento que rellenara el array",
                    "2 - Recibe la posición del índice a partir de cual quieres comenzar modificar",
                    "3 - Recibe otra posición del indicé, este segundo indicé indica hasta donde rellenara el array "
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
                    "https://www.w3schools.com/jsref/jsref_filter.asp"
                ]
            }
        ]
    },
    {
        "name": "find()",
        "principal": [
            "El método 'find()' nos devuelve el primer elemento en un array que pase una prueba",
            "Cuando find() encuentra este primer elemento que pasa la prueba, no verifica el resto de los elementos",
            "Si no encuentra un elemento en el array que cumpla con la prueba entonces devolverá 'undefined' "
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo find() encontrar el primer elemento de un array 'numeros' que sean menor que 57",
                "iframes": "https://codepen.io/James25/embed/vYEqyaK?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "find() recibe 4 Parámetros",
                "items": [
                    "1 - Recibe un callback con 3 argumentos",
                    "2 - Recibe el elemento que del array",
                    "3 - Recibe la posición índice del elemento",
                    "4 - Recibe el arreglo que se le aplicara find()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",
                    "https://www.w3schools.com/jsref/jsref_find.asp"
                ]
            }
        ]
    },
    {
        "name": "findIndex()",
        "principal": [
            "Prueba git con Edwin",
            "El método 'findIndex()' es como el hermano chiquito de 'find()', hace lo mismo pero un poquito diferente",
            "'findIndex()' nos devuelve el primer índice del elementó de un array que pase una prueba",
            "Cuando findIndex() encuentra este primer elemento que pasa la prueba, no verifica el resto de los elementos",
            "Si no encuentra un elemento en el array que cumpla con la prueba entonces devolverá '-1' "
        ],
        "examples": [
            {
                "title": " Utilizaremos el método de arreglo findIndex() encontrar el primer índice de un array 'numeros' que sean mas grandes que 77",
                "iframes": "https://codepen.io/James25/embed/vYEqgBg?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "findIndex() recibe 4 Parámetros",
                "items": [
                    "1 - Recibe un callback con 3 argumentos",
                    "2 - Recibe el elemento que del array",
                    "3 - Recibe la posición índice del elemento",
                    "4 - Recibe el arreglo que se le aplicara findIndex()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",
                    "https://www.w3schools.com/jsref/jsref_findIndex.asp"
                ]
            }
        ]
    },
    {
        "name": "join()",
        "principal": [
            "El método 'join()' método crea una cadena concatenando los elementos el array procesado",
            "join() separa los elementos por defecto con comas, pero se puede especificar un carácter de separación para los elementos",
            "Si nuestro array solamente tiene un elemento, join() nos devuelve este elemento sin separadores"
        ],
        "examples": [
            {
                "title": " implementaremos el método de array join() para imprimir los elementos en un arreglo",
                "iframes": "https://codepen.io/James25/embed/GRgVaER?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "join() solamente recibe un parámetro este es opcional",
                "items": [
                    "Recibe un separador que se aplicara entre los elementos que concatenara... este parámetro no es obligatorio porque por defecto join() separa los elementos concatenados con comas ','"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
                    "https://www.w3schools.com/jsref/jsref_join.asp"
                ]
            }
        ]
    },
    {
        "name": "reduceRight()",
        "principal": [
            "reduceRight() es como el hermano surdo de reduce(), hace exactamente los mismo pero de izquierda a derecha",
            "La funcionalidad de el método de array reduceRight() nos retorna un solo valor después de recorrer un array de izquierda a derecha y aplicarle una función",
            "Utilizando un Acumulador guardara los valores en un solo espacio después de aplicarle la función",
            "Por defecto reduceRight() le asigna el al ultimo valor del arreglo a nuestro 'acumulador' y añadirá uno por uno hasta tener un solo valor",
            "Otra opción asignar un valor inicial como primer parámetro que será el acumulador que terminara siendo nuestro valor final"
        ],
        "examples": [
            {
                "title": "Utilizando el método reduceRight() para añadir todos los números  de un arreglo a un solo valor de izquierda a derecha",
                "iframes": "https://codepen.io/James25/embed/jOEjyej?height=265&theme-id=default&default-tab=js,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "reducerRight() recibe 4 Parámetros",
                "items": [
                    "1 - Recibe una función que ejecutara en los elementos del array",
                    "2 - Recibe un acumulador, que acumulara los valores retornados de nuestra función aplicada",
                    "3 - Recibe el índice en la posición del array que está recorriendo al momento",
                    "4 - recibe el array en el cual aplicaremos reduceRight()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",
                    "https://www.w3schools.com/jsref/jsref_reduceRight.asp"
                ]
            }
        ]
    },
    {
        "name": "shift()",
        "principal": [
            "El método de array 'shift()' remueve el elemento en indicé 0 de un array y nos lo devuelve",
            "shift() cambiara la longitud de el array inicial",
            "Si el arreglo que se aplique shift() esta vacío , nos devolverá 'undefined'"
        ],
        "examples": [
            {
                "title": "Utilizando el método shift() sacar de un array el primer numero",
                "iframes": "https://codepen.io/James25/embed/yLydMba?height=265&theme-id=default&default-tab=css,result",
                "links": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
                    "https://www.w3schools.com/jsref/jsref_shift.asp"
                ]
            }
        ]
    },
    {
        "name": "pop()",
        "principal": [
            "El metodo de array 'pop()' remueve el ultimo elemento en un array y nos lo devuelve",
            "shift() cambiara la longitud de el array inicial",
            "Si el arreglo que se aplique shift() esta vacio , nos devolvera 'undefined'"
        ],
        "examples": [
            {
                "title": "Utilizando el método shift() sacar de un array el primer numero",
                "iframes": "https://codepen.io/James25/embed/jOEgoJa?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
                    "https://www.w3schools.com/jsref/jsref_shift.asp"
                ]
            }
        ]
    },
    {
        "name": "unshift()",
        "principal": [
            "el método de array unshift() agrega elementos al principio de un array.",
            "Si deseas insertar más que un elemento al arreglo, unshift() los colocara en el arreglo en la misma orden que se pasen como parámetro"
        ],
        "examples": [
            {
                "title": "Utilizaremos unshift() para agregar elementos a un arreglo",
                "iframes": "https://codepen.io/James25/embed/povMXmB?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "unshift() recibe dos Parámetros",
                "items": [
                    "Recibirá los elementos para agregar al arreglo",
                    "Recibe el arreglo cual va alterar."
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "",
                "links": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"
            }
        ]
    },
    {
        "name": "push()",
        "principal": [
            "El método de array push() agrega un elemento al final de un arreglo ",
            "push() nos devuelve la longitud y nuevo arreglo alterado"
        ],
        "examples": [
            {
                "title": "Aquí veremos dos de las maneras usar push()",
                "iframes": "https://codepen.io/James25/embed/bGNXXWZ?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Push() recibe dos Parámetros",
                "items": [
                    "Recibe los elementos que va a agregar al fin de nuestro array ",
                    "Recibe el array que modificara"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
                    "https://www.w3schools.com/jsref/jsref_push.asp"
                ]
            }
        ]
    },
    {
        "name": "reverse()",
        "principal": [
            "El metodo de array reverse() invierte cualquier arreglo al que se lo apliques",
            "Es decir que el primer elemento tomar la posición del ultimo índice y vice versa"
        ],
        "examples": [
            {
                "title": "Usaremos el m método reverse() para cambiar el orden de un array",
                "iframes": "https://codepen.io/James25/embed/XWbrMKm?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Reverse recibe solo un Parámetro",
                "items": [
                    "Recibe el array cual se le aplicara reverse()"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/reverse",
                    "https://www.w3schools.com/jsref/jsref_reverse.asp"
                ]
            }
        ]
    },
    {
        "name": "some()",
        "principal": [
            "El método de arreglo some() valida si por lo menos uno de los elementos de un array pasa una prueba asignada",
            "some() nos devuelve un valor booleano",
            "si algún elemento pasa la prueba devolverá 'true', por lo contario devolverá 'false'"
        ],
        "examples": [
            {
                "title": "Usaremos some() para validar si un arreglo cumple lo que le pedimos",
                "iframes": "https://codepen.io/James25/embed/vYOBgrg?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Some() recibe 4 Parámetros",
                "items": [
                    "Recibe la función que se aplicara como prueba a los elementos del array",
                    "Recibe el elemento que esta procesando",
                    "Recibe el arreglo al cual le aplicara la prueba"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/some",
                    "https://www.w3schools.com/jsref/jsref_some.asp"
                ]
            }
        ]
    },
    {
        "name": "sort()",
        "principal": [
            "El método de array sort() ordena todo los elementos en un array y devuelve un array ordenado.",
            "sort() utiliza lo que se llama una 'función de comparación' para definir la orden de clasificación",
            "Si no le asignas la 'función de comparación' por defecto el método sort() convierte los elementos en string y los ordena de acuerdo a los puntos de valor que tengan los caracteres en el 'unicode'"
        ],
        "examples": [
            {
                "title": "utilizaremos sort() aquí para ordenar nuestro arreglo en orden alfabética",
                "iframes": "https://codepen.io/James25/embed/VwLZboZ?height=265&theme-id=default&default-tab=html,result",
                "links": ""
            }
        ],
        "list": [
            {
                "title": "Sort recibe 3 Parámetros",
                "items": [
                    "Recibe una 'función de comparación'",
                    "Recibe el primer elemento para comparar",
                    "Recibe el segundo elemento para comparar"
                ]
            }
        ],
        "conclusions": [
            {
                "conclusionsT": "Links de apoyo",
                "links": [
                    "https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/sort",
                    "https://www.w3schools.com/jsref/jsref_sort.asp"
                ]
            }
        ]
    },
    {
        "name": "Hoisting",
        "principal": [
            "Este término aparece desde la específicación ECMAScript 2015, hace referencia al funciónamiento de los contextos de ejecución en JavaScript.",
            "Específica las faces de ejecución y creación, la específicación de variables se procesa primero que cualquier código sin importar el lugar donde se declare la variable JavaScript va a elevarla y declararla al principio de su contexto.",
            "La declaración de variables se procesa antes de ejecutar cualquier código.",
            "JavaScript solo utiliza el Hoisting para variables declaradas pero no inicializadas, el valor será asignado exactamente cuando la sentencia de asignación sea alcanzada."
        ],
        "conclusions": [
            {
                "conclusionsT": "Lisk de apoyo",
                "links": "https://developer.mozilla.org/es/docs/Glossary/Hoisting"
            }
        ]
    },
    {
        "name": "Prototypes",
        "principal": [
            "En JavaScript todos los objetos heredan métodos y propiedades de Object que también pueden ser sobrecargados como en otros lenguajes.",
            "Se puede prevenir este comportamiento de varias formas: Object.create(null) o usando Object.setPrototypeOf.",
            "Los cambios generados en el prototipo de Object son vistos por todos los objetos a traves del encadenado de prototype, este mecanismo permite extender y sobre escribir el comportamiento de un objeto"
        ],
        "list": [
            {
                "title": "Objetos Prototipados y clases",
                "items": [
                    "JavaScript no hace distinción entre clase e instancia de la clase, simplemente son objetos",
                    "Utiliza un objeto prototipado como una plantilla a partir de la cual se obtiene el conjunto inicial de propiedades para un nuevo objeto.",
                    "Permite comparar datos de diferentes tipos",
                    "Se puede utilizar del lado del cliente o del servidor",
                    "Cualquier objeto puede especificar sus propias propiedades",
                    "cualquier objeto puede ser prototipo de otro"
                ]
            },
            {
                "title": "Añadir o quitar propiedades",
                "items": [
                    "En los lenguajes basados en clases se crea una clase en tiempo de compilación y no se puede cambiar la cantidad o tipo de propiedades una vez que se ha definido la clase, luego se crean las instancias ya sea en tiempo ejecución o compilación.",
                    "En JavaScript si se pude añadir o quitar propiedades a un objeto en tiempo de ejecución"
                ]
            }
        ]
    }
]